/**
 * Tests for the localization component
 */

import { IMediator, Mediator } from '@adsk/cde-mediator';
import moment from 'moment';
import Localize from './Localize';

describe('Localize', (): any => {
    let mediator: IMediator;

    beforeAll((): any => {
        mediator = new Mediator();
    });

    function getLocaleBundle(locale: string) {
        mediator.getStore().dispatch(mediator.getComponent('@adsk/cde-mediator').getActions().setLocale({ locale: locale }));

        return Localize.getBundle();
    }

    it('returns the `error` string correctly for each localized language', (): any => {

        const languages = {en: 'Error', cs: 'Chyba', de: 'Fehler', es: 'Error', fr: 'Erreur',
                           it: 'Errore', ja: 'エラー', ko: '오류', pl: 'Błąd', 'pt-BR': 'Erro',
                           ru: 'Ошибка', tr: 'Hata', 'zh-CN': '错误', 'zh-TW': '錯誤',
                           //more test cases added due to format different
                           'de-DE': 'Fehler', 'en-US': 'Error', 'ja-JP': 'エラー', 'cs-cz': 'Chyba',
                           'de-de': 'Fehler', 'en-us': 'Error', 'es-es': 'Error', 'fr-fr': 'Erreur',
                           'it-it': 'Errore', 'ja-jp': 'エラー', 'ko-kr': '오류', 'pl-pl': 'Błąd',
                           'pt-br': 'Erro', 'ru-ru': 'Ошибка', 'tr-tr': 'Hata', 'zh-cn': '错误', 'zh-tw': '錯誤'
                         };

        Object.keys(languages).forEach((o) => {
            const bundle = getLocaleBundle(o);
            expect(bundle.text.error).toBe(languages[o]);
        });

    });
    it('returns the time after formatting with language', (): any => {
        getLocaleBundle('en');
        const time =  new Date('11/28/2019, 11:46:50 AM').toISOString();
        const today = new Date().toISOString();
        const yesterday = new Date(new Date().getTime() - 86400000).toISOString();
        const tommorow = new Date(new Date().getTime() + 86400000).toISOString();
        expect(moment.locale()).toEqual('en');
        expect(Localize.formatTime(time)).toEqual('11:46 AM');
        expect(Localize.formatTime('')).toBeNull();
        expect(Localize.getDayFromTime('')).toBeNull();
        expect(Localize.getDayFromTime(time)).toEqual(moment(time).format('ll'));
        expect(Localize.getDayFromTime(today)).toEqual('Today');
        expect(Localize.getDayFromTime(yesterday)).toEqual('Yesterday');
        expect(Localize.getDayFromTime(tommorow)).toEqual(moment(tommorow).format('ll'));
        expect(Localize.getDataCardTimeFormat(time)).toEqual('11:46 AM Nov 28, 2019');
    });
    it('should set correct local setting string for moment', (): any => {
        getLocaleBundle('ja-jp');
        expect(moment.locale()).toEqual('ja');
        getLocaleBundle('zh-CN');
        expect(moment.locale()).toEqual('zh-cn');
    });
});
