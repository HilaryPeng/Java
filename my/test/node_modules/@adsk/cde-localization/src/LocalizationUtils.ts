import Localize from './Localize';

/**
 * Get a localized string from the specifed "sub-bundle" for the specified localization key
 *
 * @param subBundleKey - The key (from localizationBundle.json) for the sub-object to localize the provided key
 * @param localizationKey - The key (from localizationBundle.json) representing the key to localize
 * @returns The localized string or 'UNKNOWN STRING' if the key does not exist.
 */
export function localize(subBundleKey: string, localizationKey: string): string {
    const bundle: any = Localize.getBundle();
    let localizedString = 'UNKNOWN STRING';

    // Ensure that *everything* exists before attempting to reference the specified key.
    // This will prevent exceptions if a localized file is missing a parent-level key for some reason.
    if (bundle && bundle.text && bundle.text[subBundleKey] && bundle.text[subBundleKey][localizationKey]) {
        localizedString = bundle.text[subBundleKey][localizationKey];
    }

    return localizedString;
}

/**
 * Get a localized string for the specified localization key found in the 'setupsheet' sub-bundle
 *
 * @param localizationKey - The key (from localizationBundle.json) representing the key to localize
 * @returns The localized string or a default string if the key does not exist.
 */
export function ss_localize(localizationKey: string): string {
    return localize('setupsheet', localizationKey);
}
