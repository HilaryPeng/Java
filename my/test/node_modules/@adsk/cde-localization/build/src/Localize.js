var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Localize component - handle localization of labels
 * This component is also a Mediator Component, exposing localization bundle through redux store
 */
import moment from 'moment';
import * as React from 'react';
import bundle from '../bundles/localizationBundle.json';
import bundle_cs from '../bundles/localizationBundle_cs.json';
import bundle_de from '../bundles/localizationBundle_de.json';
import bundle_es from '../bundles/localizationBundle_es.json';
import bundle_fr from '../bundles/localizationBundle_fr.json';
import bundle_it from '../bundles/localizationBundle_it.json';
import bundle_ja from '../bundles/localizationBundle_ja.json';
import bundle_ko from '../bundles/localizationBundle_ko.json';
import bundle_pl from '../bundles/localizationBundle_pl.json';
import bundle_ptBR from '../bundles/localizationBundle_pt-BR.json';
import bundle_ru from '../bundles/localizationBundle_ru.json';
import bundle_tr from '../bundles/localizationBundle_tr.json';
import bundle_zhCN from '../bundles/localizationBundle_zh-CN.json';
import bundle_zhTW from '../bundles/localizationBundle_zh-TW.json';
import { Mediator, MediatorComponent } from '@adsk/cde-mediator';
import { localizeReducer } from './reducer';
/**
 * Localize component - localization of labels through component
 */
var Localize = /** @class */ (function (_super) {
    __extends(Localize, _super);
    /**
     * Constructor of the class Localize
     * @param ILocalize - interface defined with properties passed into this component
     */
    function Localize(props) {
        var _this = _super.call(this, props) || this;
        _this.packageIdentifier = '@adsk/cde-localization';
        _this.reducers = { root: localizeReducer };
        _this.actions = {};
        return _this;
    }
    //tslint:disable-next-line:function-name
    Localize.getBundle = function () {
        var locale = Localize.mediator.getStore().getState()['@adsk/cde-mediator'].appLocale || '';
        var result = this.getLocaleMap().get(locale.toLowerCase());
        moment.locale(this.getMomentLocalMap(locale));
        return result ? result : bundle;
    };
    /**
     * Format date to a specified format.
     * For example: moment(date).format('LT') //  "h:mm A"
     * moment(data).format('ll') // "MMM D YYYY"
     * return an string and we can change return value in the future. all format can view in https://momentjs.com/docs/
     */
    // tslint:disable-next-line: function-name
    Localize.formatTime = function (time) {
        if (!time) {
            return null;
        }
        return "" + moment(time).format('LT');
    };
    /**
     * Format date to a specified format.
     * Input date string and format format like 'lll','ll'
     * It is using function moment(data).format('ll') // "MMM D YYYY"
     * return an string. All format can view in https://momentjs.com/docs/
     */
    // tslint:disable-next-line: function-name
    Localize.formatDate = function (date, dateFormat) {
        if (!date) {
            return null;
        }
        return "" + moment(date).format(dateFormat);
    };
    // tslint:disable-next-line: function-name
    Localize.getDayFromTime = function (time) {
        if (!time) {
            return null;
        }
        var locale = Localize.mediator.getStore().getState()['@adsk/cde-mediator'].appLocale || '';
        var notStringTime = "" + moment(time).format('ll');
        var today = this.getBundle().text.today || 'Today';
        var yesterday = this.getBundle().text.yesterday || 'Yesterday';
        moment.updateLocale(moment.locale(this.getMomentLocalMap(locale)), {
            calendar: {
                sameDay: "[" + today + "]",
                lastDay: "[" + yesterday + "]",
                sameElse: function (now) { return "[" + notStringTime + "]"; },
                nextDay: function (now) { return "[" + notStringTime + "]"; },
                nextWeek: function (now) { return "[" + notStringTime + "]"; },
                lastWeek: function (now) { return "[" + notStringTime + "]"; }
            }
        });
        return "" + moment(time).calendar();
    };
    //tslint:disable-next-line: function-name
    Localize.getDataCardTimeFormat = function (time) {
        return moment(time).format('LT') + " " + moment(time).format('ll');
    };
    Localize.getLocaleMap = function () {
        if (Localize.localeMap !== undefined) {
            return Localize.localeMap;
        }
        var map = new Map();
        // due to no case sensitive, same localStrings will be merged
        // localeStrings from Frement have been merged to below
        // the follows are from Fusion Team(FT)
        map.set('cs-cz', bundle_cs);
        map.set('de-de', bundle_de);
        map.set('en-us', bundle);
        map.set('es-es', bundle_es);
        map.set('fr-fr', bundle_fr);
        map.set('it-it', bundle_it);
        map.set('ja-jp', bundle_ja);
        map.set('ko-kr', bundle_ko);
        map.set('pl-pl', bundle_pl);
        map.set('pt-br', bundle_ptBR);
        map.set('ru-ru', bundle_ru);
        map.set('tr-tr', bundle_tr);
        map.set('zh-cn', bundle_zhCN);
        map.set('zh-tw', bundle_zhTW);
        // the followings are from CDE
        map.set('cs', bundle_cs);
        map.set('de', bundle_de);
        map.set('es', bundle_es);
        map.set('fr', bundle_fr);
        map.set('it', bundle_it);
        map.set('ja', bundle_ja);
        map.set('ko', bundle_ko);
        map.set('pl', bundle_pl);
        map.set('ru', bundle_ru);
        map.set('tr', bundle_tr);
        Localize.localeMap = map;
        return Localize.localeMap;
    };
    /**
     * Match correct language string for moment.
     * @param local language string
     */
    Localize.getMomentLocalMap = function (local) {
        var momentLocal = local.toLocaleLowerCase();
        var momentLocalArray = ['cs', 'de', 'es', 'fr', 'it', 'ja', 'ko', 'pl', 'pu', 'tr'];
        return momentLocalArray.find(function (item) { return momentLocal.toLocaleLowerCase().indexOf(item) === 0; }) || momentLocal;
    };
    /**
     * Implement IMediatorComponent getActions
     */
    Localize.prototype.getActions = function () {
        return this.actions;
    };
    /**
     * Implement IMediatorComponent getReducers
     */
    Localize.prototype.getReducers = function () {
        return this.reducers;
    };
    /**
     * Implement IMediatorComponent getMiddleware
     */
    Localize.prototype.getMiddleware = function () {
        // tslint:disable-next-line
        return function (args) { return function (next) { return function (action) { }; }; };
    };
    /**
     * Built-in React lifecycle callback - called when this component is mounted
     */
    Localize.prototype.componentDidMount = function () {
        Localize.mediator.registerComponents([{ name: this.packageIdentifier, comp: this }]);
    };
    /**
     * Built-in React lifecycle callback - called for rendering of this component
     * @return A React component
     */
    Localize.prototype.render = function () {
        var localizedBundle = Localize.getBundle();
        return (React.createElement("span", null, this.props.id.split('.').reduce(function (o, i) { return o[i]; }, localizedBundle)));
    };
    Localize.mediator = new Mediator();
    return Localize;
}(MediatorComponent));
// tslint:disable-next-line
export default Localize;
//# sourceMappingURL=Localize.js.map